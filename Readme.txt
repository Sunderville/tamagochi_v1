Приложение «Тамагочи» выполнено в качестве тестового проекта.


Для запуска на JDK версии выше 1.8 необходимо:

1)указать IDE путь на библиотеку JavaFX (папка /lib):
например, в IDEA :   File  →  Project Structure...  →  Libraries
При отсутствии на компьютере установленного SDK JavaFX его можно скачать здесь:
https://gluonhq.com/products/javafx/

2)установить следующие параметры запуска в Run  →  Run Configuration  →  VM options:
--module-path {path to javafx*} --add-modules javafx.controls,javafx.fxml
*Пример указания пути: "C:\Java\javafx-sdk-11.0.2\lib"


Основной реализованный функционал:

1. Возможность выбора из четырёх различных персонажей, представленных на главном экране.

2.Для каждого персонажа предусмотрен индивидуальный набор PNG-спрайтов, соответствующих различным состояниям и действиям:

- логотип персонажа для главного экрана,
- базовое изображение персонажа,
- персонаж доволен,
- персонаж болен,
- персонаж мёртв,
 
- еда персонажа,
- развлечение персонажа.

3.Простая анимация передвижения персонажа в горизонтальной плоскости. 
В планах размещение кнопки запуска/остановки движения.

4.Рост персонажа - увеличение размера изображения питомца происходит в соответствии с его возрастом. Коэффициент роста по умолчанию выставлен на 1% в «год» - т.е. при продолжительности жизни питомца 20 условных «лет» его изображение постепенно увеличится на 20%. Больше — нежелательно, т.к. появляется риск выхода изображения за границы бэкграунда.

5.Перманентная анимация окружающей среды и смены времени суток:
- восход/закат солнца,
- изменение оттенка солнца,
- изменение цвета неба.

6.Основные параметры жизненного цикла персонажа и анимации доступны для редактирования:
- максимальный возраст,
- максимальная сытость,
- максимальный уровень счастья,
- шаг взросления,
- шаг нарастания голода и скуки,
- время «траура»,
- скорость передвижения персонажа,
- скорость анимации природы.

Параметры сытости и довольства (скорость, шаг) для упрощения взаимосвязаны, однако в коде оставлены для них и раздельные методы.

Данные параметры вынесены в единый property-файл с целью предоставления любому пользователю возможности редактирования без необходимости внедрения в исходный код.

7.Состояние питомца в виде основных показателей сохраняется в отдельный текстовой файл в корневой директории самого приложения. Файл перезаписывается при выходе из программы и/или смерти персонажа.

8.При снижении любого из двух показателей (сытость, довольство) до критического уровня картинка персонажа меняется на «больного» с возможностью восстановления до нормального состояния после кормления и/или игры. Критический уровень пока «зашит» в коде и составляет 3 пункта. 

9.Смерть персонажа может произойти по одной из трёх причин: критический голод, критическое состояние скуки, а также по естественной причине - «от старости». Причём, не имеет значения, было ли в момент смерти приложение запущено.

10.Эффект «траура» - если смерть питомца произошла недавно (по умолчанию — 60 секунд), последующие запуски приложения в течение данного времени выдают «экран смерти». При запуске вычисляется время его заочной смерти, которая берётся за точку отсчёта.

11.На верхней панели доступны следующие кнопки выпадающих меню:
- Сброс прогресса персонажа — удаление файла сохранения с выходом из приложения. Игнорирует эффект «траура» при недавней гибели питомца.
- Дублирование кнопки закрытия приложения.
- Показ окна «About» поверх основного окна (пока без содержимого).

12.Основные показатели питомца (возраст, сытость, довольство) динамически отображаются в специальных полях рабочего экрана. Также при снижении сытости и довольства ниже 10 пунктов в верхних углах окна появляются их графические дублёры. При последующем повышении показателей дублёры исчезают.



Известные баги:
1. «Плавающая» ошибка, связанная с многопоточностью. Возникает рандомно; вызывает зависание всей анимации. Ошибка ссылается на строчку «stage.showAndWait();». Предполагамое решение — применение Platform.runLater(); вместо Task для отображения индикаторов показателей персонажа.
2.Разворот персонажа (Flip) работает не синхронно с движением персонажа.
3.Общая стабильность анимации движения и роста персонажа. Слабый уровень контроля за анимацией.